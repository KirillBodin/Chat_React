import React, { useEffect, useState, useRef } from 'react'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ React —Ç–∞ —Ö—É–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º —ñ –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º / Importing React and hooks for state and lifecycle management
import { useParams } from 'react-router-dom'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ useParams –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ URL / Importing useParams for extracting parameters from the URL
import axios from 'axios'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ axios –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API / Importing axios for API calls
import io from 'socket.io-client'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Socket.IO –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É / Importing Socket.IO for real-time communication
import { Picker } from 'emoji-mart'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Emoji Picker / Importing Emoji Picker
import 'emoji-mart/css/emoji-mart.css'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è Emoji Picker / Importing styles for Emoji Picker
import MicIcon from '@mui/icons-material/Mic'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–∫–æ–Ω–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ / Importing mic icon
import StopIcon from '@mui/icons-material/Stop'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–∫–æ–Ω–∫—É –∑—É–ø–∏–Ω–∫–∏ / Importing stop icon
import VideocamIcon from '@mui/icons-material/Videocam'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–∫–æ–Ω–∫—É –≤—ñ–¥–µ–æ–∫–∞–º–µ—Ä–∏ / Importing video camera icon
import StopCircleIcon from '@mui/icons-material/StopCircle'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–∫–æ–Ω–∫—É –∑—É–ø–∏–Ω–∫–∏ –∑–∞–ø–∏—Å—É / Importing stop recording icon
import { Button, IconButton } from '@mui/material'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ Material UI / Importing Material UI components
import { format } from 'date-fns'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ / Importing function for date formatting

function ChatRoom({ user, isDarkMode }) {
    const { roomName } = useParams(); // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫—ñ–º–Ω–∞—Ç–∏ –∑ URL / Extracting room name from URL parameters
    const [messages, setMessages] = useState([]); // –°—Ç–∞–Ω –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å / State for messages
    const [message, setMessage] = useState(''); // –°—Ç–∞–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / State for new message
    const [showPicker, setShowPicker] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑—É emoji picker / State to show emoji picker
    const [isRecordingAudio, setIsRecordingAudio] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ / State for audio recording
    const [isRecordingVideo, setIsRecordingVideo] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –∑–∞–ø–∏—Å—É –≤—ñ–¥–µ–æ / State for video recording
    const [isVideoWindowOpen, setIsVideoWindowOpen] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–∫–Ω–∞ –∑–∞–ø–∏—Å—É –≤—ñ–¥–µ–æ / State for video recording window
    const videoRef = useRef(null); // Ref –¥–ª—è –≤—ñ–¥–µ–æ–µ–ª–µ–º–µ–Ω—Ç–∞ / Ref for video element
    const player = useRef(null); // Ref –¥–ª—è –ø–ª–µ—î—Ä–∞ / Ref for player
    const socketRef = useRef(null); // Ref –¥–ª—è Socket.IO –∑'—î–¥–Ω–∞–Ω–Ω—è / Ref for Socket.IO connection

    useEffect(() => {
        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞ / Fetch existing room messages from the server
        axios.get(`http://localhost:5000/api/message/${roomName}`)
            .then((response) => {
                setMessages(response.data); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å / Update messages state
            })
            .catch((error) => {
                console.error('Error fetching room messages:', error); // –õ–æ–≥ –ø–æ–º–∏–ª–∫–∏ / Log error
            });

        // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Socket.IO —Å–µ—Ä–≤–µ—Ä–∞ / Connect to Socket.IO server
        socketRef.current = io('http://localhost:5000', { query: { username: user } });

        // –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—å –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ / Join the room
        socketRef.current.emit('joinRoom', roomName);

        // –°–ª—É—Ö–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Listen for new messages
        socketRef.current.on('message', (newMessage) => {
            setMessages((prevMessages) => [...prevMessages, newMessage]); // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Update messages
        });

        return () => {
            socketRef.current.disconnect(); // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ / Disconnect on component unmount
        };
    }, [roomName, user]); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ / Run effect when room or user changes

    const handleSendText = () => {
        if (message.trim()) {
            const newMessage = { text: message, username: user, room: roomName }; // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Create new message
            socketRef.current.emit('message', newMessage); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Socket.IO / Send message via Socket.IO
            setMessage(''); // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ / Clear input after sending
        }
    };

    const addEmoji = (emoji) => {
        setMessage((prevMessage) => prevMessage + emoji.native); // –î–æ–¥–∞—î–º–æ emoji –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Add emoji to message
    };

    const startRecordingAudio = () => {
        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
            const recorder = new MediaRecorder(stream); // –°—Ç–≤–æ—Ä—é—î–º–æ MediaRecorder –¥–ª—è –∞—É–¥—ñ–æ / Create MediaRecorder for audio
            recorder.start(); // –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Å / Start recording
            setIsRecordingAudio(true); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω / Update state
        });
    };

    const stopRecordingAudio = () => {
        setIsRecordingAudio(false); // –ó—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å –∞—É–¥—ñ–æ / Stop audio recording
    };

    const startRecordingVideo = () => {
        setIsVideoWindowOpen(true); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å—É –≤—ñ–¥–µ–æ / Open video recording window
        setIsRecordingVideo(true); // –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Å –≤—ñ–¥–µ–æ / Start video recording
    };

    const stopRecordingVideo = () => {
        if (player.current && player.current.record().isRecording()) {
            player.current.record().stop(); // –ó—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å –≤—ñ–¥–µ–æ / Stop video recording
        }
    };

    const chatRoomContainerStyle = {
        backgroundColor: isDarkMode ? '#2c2c2c' : '#ffffff', // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–º–∏ / Set background based on theme
        color: isDarkMode ? '#ffffff' : '#000000', // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–º–∏ / Set text color based on theme
    };

    return (
        <div className="private-messages-container" style={chatRoomContainerStyle}> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å / Container for messages */}
            <h2>Room: {roomName}</h2> {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–º'—è –∫—ñ–º–Ω–∞—Ç–∏ / Display room name */}
            <div className="messages"> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å / Container for displaying messages */}
                {messages.map((msg, index) => (
                    <div key={index} className={`message ${msg.username === user ? 'user-message' : 'room-message'}`}> {/* –ö–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å / Class for styling messages */}
                        <div className="message-content">
                            <strong>{msg.username}: </strong>
                            {msg.text && <span>{msg.text}</span>} {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Display message text */}
                            {msg.audioUrl && <audio controls src={`http://localhost:5000${msg.audioUrl}`} />} {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∞—É–¥—ñ–æ / Display audio */}
                            {msg.videoUrl && <video controls src={`http://localhost:5000${msg.videoUrl}`} width="300" />} {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—ñ–¥–µ–æ / Display video */}
                        </div>
                        <div className="timestamp">
                            {msg.timestamp && format(new Date(msg.timestamp), 'dd/MM/yyyy HH:mm')} {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —á–∞—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Display message time */}
                        </div>
                    </div>
                ))}
            </div>

            <div className="input-container"> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å / Container for message input */}
                <input
                    type="text"
                    placeholder="Enter your message"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)} // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–µ–∫—Å—Ç—É / Update state on text change
                />
                <Button variant="contained" color="primary" onClick={handleSendText}>Send</Button> {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Button to send text message */}

                <IconButton onClick={() => setShowPicker(!showPicker)}> {/* –Ü–∫–æ–Ω–∫–∞ –¥–ª—è –≤–∏–±–æ—Ä—É emoji / Icon for emoji picker */}
                    üòÄ
                </IconButton>
                {showPicker && (
                    <div className="emoji-picker">
                        <Picker onSelect={(emoji) => setMessage((prevMessage) => prevMessage + emoji.native)} /> {/* –í–∏–±–∏—Ä–∞—î–º–æ emoji —ñ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è / Pick emoji and add to message */}
                    </div>
                )}
            </div>

            {isVideoWindowOpen && (
                <div className="video-recording-window"> {/* –í—ñ–∫–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å—É –≤—ñ–¥–µ–æ / Video recording window */}
                    <div data-vjs-player>
                        <video ref={videoRef} className="video-js vjs-default-skin" playsInline></video> {/* –ï–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–µ–æ–∑–∞–ø–∏—Å—É / Video element for recording */}
                    </div>
                </div>
            )}
        </div>
    );
}

export default ChatRoom; // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ChatRoom / Exporting ChatRoom component
